name: API Documentation Generation

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'api-docs/**'
  workflow_dispatch:

jobs:
  generate_openapi_docs:
    name: Generate OpenAPI Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create OpenAPI directory
        run: mkdir -p api-docs/openapi
      
      - name: Generate OpenAPI specification
        run: |
          echo "Generating OpenAPI specification..."
          # In a real scenario, this would use a tool like swagger-jsdoc to generate the spec
          # For demonstration, we'll create a simple OpenAPI spec
          cat > api-docs/openapi/openapi.yaml << 'EOF'
          openapi: 3.0.0
          info:
            title: Example API
            description: Example Web API for GitHub Actions automation
            version: 1.0.0
          servers:
            - url: https://api.example.com/v1
              description: Production server
            - url: https://api-staging.example.com/v1
              description: Staging server
            - url: http://localhost:3000/api
              description: Local development server
          paths:
            /products:
              get:
                summary: Get all products
                responses:
                  '200':
                    description: A list of products
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            success:
                              type: boolean
                            count:
                              type: integer
                            data:
                              type: array
                              items:
                                $ref: '#/components/schemas/Product'
              post:
                summary: Create a new product
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/ProductInput'
                responses:
                  '201':
                    description: Product created successfully
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            success:
                              type: boolean
                            data:
                              $ref: '#/components/schemas/Product'
          components:
            schemas:
              Product:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                  category:
                    type: string
                    enum: [electronics, clothing, food, books, other]
                  inStock:
                    type: boolean
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
              ProductInput:
                type: object
                required:
                  - name
                  - description
                  - price
                  - category
                properties:
                  name:
                    type: string
                    maxLength: 100
                  description:
                    type: string
                  price:
                    type: number
                    minimum: 0
                  category:
                    type: string
                    enum: [electronics, clothing, food, books, other]
                  inStock:
                    type: boolean
                    default: true
          EOF
          echo "OpenAPI specification generated successfully!"
      
      - name: Validate OpenAPI specification
        run: |
          echo "Validating OpenAPI specification..."
          # In a real scenario, this would use a tool like openapi-validator
          # For demonstration, we'll simulate validation
          echo "OpenAPI specification is valid!"
      
      - name: Generate API documentation
        run: |
          echo "Generating API documentation from OpenAPI specification..."
          # In a real scenario, this would use a tool like redoc-cli or swagger-ui
          # For demonstration, we'll create a simple HTML doc
          mkdir -p api-docs/html
          cat > api-docs/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <title>Example API Documentation</title>
              <meta charset="utf-8"/>
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
            </head>
            <body>
              <div class="container py-5">
                <h1>Example API Documentation</h1>
                <p>This is a placeholder for the generated API documentation.</p>
                <p>In a real implementation, this would be a fully interactive API documentation generated from the OpenAPI specification.</p>
                <h2>Endpoints</h2>
                <ul>
                  <li><code>GET /api/products</code> - Get all products</li>
                  <li><code>GET /api/products/:id</code> - Get a single product</li>
                  <li><code>POST /api/products</code> - Create a new product</li>
                  <li><code>PUT /api/products/:id</code> - Update a product</li>
                  <li><code>DELETE /api/products/:id</code> - Delete a product</li>
                </ul>
              </div>
            </body>
          </html>
          EOF
          echo "API documentation generated successfully!"
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: api-docs/
      
      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying API documentation to GitHub Pages..."
          # In a real scenario, this would deploy to GitHub Pages
          # For demonstration, we'll simulate deployment
          echo "Documentation deployed to https://example.com/api-docs"
